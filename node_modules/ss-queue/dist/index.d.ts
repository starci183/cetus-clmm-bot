import { SinglyList } from 'ss-linked-list';
export default class Queue<T> {
    queue: SinglyList<T>;
    constructor(...values: T[]);
    readonly length: number;
    /**
     * Read the element at the front of the queue without removing it.
     *
     * @returns {(T | void)}
     * @memberof Queue
     */
    readonly peek: T | void;
    /**
     * if is empty queue
     *
     * @returns {boolean}
     * @memberof Queue
     */
    isEmpty(): boolean;
    /**
     * Add a new element to the end of the queue (the tail of the linked list).
     * This element will be processed after all elements ahead of it.
     *
     * @param {*} value
     * @returns {boolean}
     * @memberof Queue
     */
    enqueue(value: any): boolean;
    /**
     * Remove the element at the front of the queue (the head of the linked list).
     * If the queue is empty, return void.
     *
     * @returns {(T | void)}
     * @memberof Queue
     */
    dequeue(): T | void;
    /**
     * transform to array
     *
     * @returns {T[]}
     * @memberof Queue
     */
    toArray(): T[];
}
