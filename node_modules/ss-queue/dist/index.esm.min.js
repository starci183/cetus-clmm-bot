import{SinglyList}from"ss-linked-list";function __read(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,u,o=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){u={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(u)throw u.error}}return i}function __spread(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(__read(arguments[t]));return e}var Queue=function(){function e(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.queue=new(SinglyList.bind.apply(SinglyList,__spread([void 0],e)))}return Object.defineProperty(e.prototype,"length",{get:function(){return this.queue.length},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"peek",{get:function(){return this.queue.head},enumerable:!0,configurable:!0}),e.prototype.isEmpty=function(){return this.queue.isEmpty()},e.prototype.enqueue=function(e){return this.queue.append(e)},e.prototype.dequeue=function(){var e=this.queue.removeHead();return void 0!==e?e:void 0},e.prototype.toArray=function(){return this.queue.toArray()},e}();export default Queue;
