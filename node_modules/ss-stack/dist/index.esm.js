import { SinglyList } from 'ss-linked-list';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

var stack = /** @class */ (function () {
    function stack() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        // We're going to implement Stack based on LinkedList since these
        // structures are quite similar. Compare push/pop operations of the Stack
        // with append/deleteTail operations of LinkedList.
        this.stack = new (SinglyList.bind.apply(SinglyList, __spread([void 0], values)))();
    }
    Object.defineProperty(stack.prototype, "length", {
        get: function () {
            return this.stack.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(stack.prototype, "peek", {
        /**
         * Read the element at the front of the queue without removing it.
         *
         * @returns {(T | void)}
         * @memberof Queue
         */
        get: function () {
            return this.stack.tail;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * if is empty queue
     *
     * @returns {boolean}
     * @memberof Queue
     */
    stack.prototype.isEmpty = function () {
        return this.stack.isEmpty();
    };
    /**
     * Add a new element to the end of the queue (the tail of the linked list).
     * This element will be processed after all elements ahead of it.
     *
     * @param {*} value
     * @returns {boolean}
     * @memberof Queue
     */
    stack.prototype.push = function (value) {
        return this.stack.append(value);
    };
    /**
     * Remove the element at the front of the queue (the tail of the linked list).
     * If the queue is empty, return void.
     *
     * @returns {(T | void)}
     * @memberof Queue
     */
    stack.prototype.pop = function () {
        var removedTail = this.stack.removeTail();
        return typeof removedTail !== 'undefined' ? removedTail : void 0;
    };
    /**
     * Remove the element at the bottom of the queue (the head of the linked list).
     * If the queue is empty, return void.
     *
     * @returns {(T | void)}
     * @memberof Queue
     */
    stack.prototype.popBottom = function () {
        var removedHead = this.stack.removeHead();
        return typeof removedHead !== 'undefined' ? removedHead : void 0;
    };
    /**
     * transform to array
     *
     * @returns {T[]}
     * @memberof Queue
     */
    stack.prototype.toArray = function () {
        return this.stack.toArray();
    };
    return stack;
}());

export default stack;
