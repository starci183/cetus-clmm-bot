'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Comparator = _interopDefault(require('ss-comparator'));

var SinglyNode = /** @class */ (function () {
    function SinglyNode(val) {
        this.value = val;
        this.next = null;
    }
    return SinglyNode;
}());
var DoublyNode = /** @class */ (function () {
    function DoublyNode(val) {
        this.value = val;
        this.next = null;
        this.prev = null;
    }
    return DoublyNode;
}());

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

var OBFUSCATED_ERROR = 'obfuse error occur';
function invariant(check, message) {
    if (!check)
        throw new Error('[linked-list] ' + (message || OBFUSCATED_ERROR));
}
var INDEX_NOT_FOUND = -1;

var List = /** @class */ (function () {
    function List() {
        var _this = this;
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        this._head = null;
        this._tail = null;
        this._length = 0;
        this.compare = new Comparator();
        if (values.length > 0) {
            values.forEach(function (value) {
                _this.append(value);
            });
        }
    }
    Object.defineProperty(List.prototype, "head", {
        get: function () {
            return this._head ? this._head.value : void 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "tail", {
        get: function () {
            return this._tail ? this._tail.value : void 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "length", {
        get: function () {
            return this._length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "loopLength", {
        get: function () {
            var isLoop = false;
            var loopLength = 1;
            if (!this._head) {
                return 0;
            }
            var p1 = this._head;
            var p2 = this._head;
            while (p2.next && p2.next.next) {
                p2 = p2.next.next;
                p1 = p1.next;
                if (p1 === p2) {
                    isLoop = true;
                    break;
                }
            }
            if (isLoop) {
                p2 = p2.next;
                while (p1 !== p2) {
                    loopLength++;
                    p2 = p2.next;
                }
                return loopLength;
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    List.prototype.getNode = function (position) {
        var length = this._length;
        // 1st use-case: invalid position
        invariant(length > 0 && position >= 0 && position < length, "[linked-list] index " + position + " out of scope of list, which length is " + length);
        var currentNode = this._head;
        var count = 0;
        // 2nd use-case: a valid position
        while (count < position) {
            currentNode = currentNode.next;
            count++;
        }
        return currentNode;
    };
    List.prototype.get = function (position) {
        var node = this.getNode(position);
        return node ? node.value : null;
    };
    /**
     * 根据指定条件返回待查找的链表节点
     *
     * @param {IFindConition<T>} { value, callback }
     * @returns
     * @memberof List
     */
    List.prototype.find = function (_a) {
        var value = _a.value, callback = _a.callback;
        if (!this._head) {
            return null;
        }
        var currentNode = this._head;
        while (currentNode) {
            // If callback is specified then try to find node by callback.
            if (callback && callback(currentNode.value)) {
                return currentNode;
            }
            // If value is specified then try to compare by value..
            if (value !== undefined && this.compare.equal(currentNode.value, value)) {
                return currentNode;
            }
            currentNode = currentNode.next;
        }
        return null;
    };
    List.prototype.indexOf = function (val) {
        if (!this._head) {
            return INDEX_NOT_FOUND;
        }
        var currentNode = this._head;
        var count = -1;
        // 多余 1 个节点的情况
        while (currentNode.next) {
            count++;
            if (this.compare.equal(currentNode.value, val)) {
                return count;
            }
            currentNode = currentNode.next;
        }
        // 如果是末尾节点，需要额外处理
        if (currentNode === this._tail && this.compare.equal(currentNode.value, val)) {
            count += 1;
        }
        return count;
    };
    List.prototype.first = function (num) {
        invariant(num >= 0, "[linked-list] param 'num' (" + num + ") should not less than 0");
        var iter = this.iterator();
        var result = [];
        var n = Math.min(num, this.length);
        for (var i = 0; i < n; i++) {
            var val = iter.next();
            result.push(val.value);
        }
        return result;
    };
    List.prototype.toArray = function () {
        return __spread(this);
    };
    List.prototype.isEmpty = function () {
        return this._head === null;
    };
    List.prototype.iterator = function () {
        var currentNode;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    currentNode = this._head;
                    _a.label = 1;
                case 1:
                    if (!currentNode) return [3 /*break*/, 3];
                    return [4 /*yield*/, currentNode.value];
                case 2:
                    _a.sent();
                    currentNode = currentNode.next;
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    List.prototype[Symbol.iterator] = function () {
        return this.iterator();
    };
    return List;
}());

var SinglyList = /** @class */ (function (_super) {
    __extends(SinglyList, _super);
    function SinglyList() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        return _super.apply(this, __spread(values)) || this;
    }
    // Adds the element at the end of the linked list
    SinglyList.prototype.append = function (val) {
        var node = new SinglyNode(val);
        if (!this._tail) {
            this._head = this._tail = node;
        }
        else {
            this._tail.next = node;
            this._tail = node;
        }
        this._length++;
        return true;
    };
    // Add the element at the beginning of the linked list
    SinglyList.prototype.prepend = function (val) {
        var node = new SinglyNode(val);
        if (!this._head) {
            this._head = this._tail = node;
        }
        else {
            node.next = this._head;
            this._head = node;
        }
        this._length++;
        return true;
    };
    // remove by value
    SinglyList.prototype.remove = function (val) {
        var currentNode = this._head;
        if (!currentNode) {
            return;
        }
        if (this.compare.equal(currentNode.value, val)) {
            // 这里需要注意，有两种情况：
            if (currentNode.next) {
                // 链表多于 1 个元素
                this._head = currentNode.next;
                currentNode.next = null;
            }
            else {
                // 链表只有 1 个元素
                this._head = this._tail = null;
            }
            this._length--;
            return val;
        }
        else {
            var prevNode = currentNode;
            while (true) {
                if (this.compare.equal(currentNode.value, val)) {
                    if (currentNode.next) {
                        prevNode.next = currentNode.next;
                    }
                    else {
                        // special case for last element
                        this._tail = prevNode;
                        this._tail.next = null;
                    }
                    currentNode.next = null;
                    this._length--;
                    return val;
                }
                else {
                    if (currentNode.next) {
                        prevNode = currentNode;
                        currentNode = currentNode.next;
                    }
                    else {
                        return;
                    }
                }
            }
        }
    };
    SinglyList.prototype.removeHead = function () {
        var currentNode = this._head;
        // empty list
        if (!currentNode) {
            return;
        }
        // single item list
        if (!this._head.next) {
            this._head = null;
            this._tail = null;
            // full list
        }
        else {
            this._head = currentNode.next;
            currentNode.next = null;
        }
        this._length--;
        return currentNode.value;
    };
    SinglyList.prototype.removeTail = function () {
        var tailNode = this._tail;
        // empty list
        if (!tailNode) {
            return;
        }
        // single item list
        if (!this._head.next) {
            this._head = null;
            this._tail = null;
            // full list
        }
        else {
            // start traversal from head
            var currentNode = this._head;
            while (currentNode.next !== tailNode) {
                currentNode = currentNode.next;
            }
            currentNode.next = null;
            this._tail = currentNode;
        }
        this._length--;
        return tailNode.value;
    };
    SinglyList.prototype.reverse = function () {
        if (!this._head) {
            return;
        }
        var currentNode = this._head;
        var prevNode = null;
        var nextNode;
        this._tail = this._head;
        while (currentNode !== null) {
            nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }
        this._head = prevNode;
    };
    SinglyList.prototype.clone = function () {
        var arrValue = this.toArray();
        return new (SinglyList.bind.apply(SinglyList, __spread([void 0], arrValue)))();
    };
    return SinglyList;
}(List));
var AbstractCircleSinglyList = /** @class */ (function (_super) {
    __extends(AbstractCircleSinglyList, _super);
    function AbstractCircleSinglyList() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var _this = _super.apply(this, __spread(values)) || this;
        _this.cyclization();
        return _this;
    }
    AbstractCircleSinglyList.prototype.iterator = function () {
        var currentNode;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    currentNode = this._head;
                    _a.label = 1;
                case 1:
                    if (!currentNode) return [3 /*break*/, 3];
                    return [4 /*yield*/, currentNode.value];
                case 2:
                    _a.sent();
                    currentNode = currentNode.next;
                    // 如果下一个节点是 head，说明回到循环列表的头部了
                    if (currentNode === this._head) {
                        currentNode = null;
                    }
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    AbstractCircleSinglyList.prototype.circleIterator = function () {
        var currentNode;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    currentNode = this._head;
                    _a.label = 1;
                case 1:
                    if (!currentNode) return [3 /*break*/, 3];
                    return [4 /*yield*/, currentNode.value];
                case 2:
                    _a.sent();
                    currentNode = currentNode.next;
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    AbstractCircleSinglyList.prototype[Symbol.iterator] = function () {
        return this.iterator();
    };
    AbstractCircleSinglyList.prototype.mapToNormalListFn = function (name) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        this.breakCircle();
        var result = _super.prototype[name].apply(this, params);
        this.cyclization();
        return result;
    };
    AbstractCircleSinglyList.prototype.getNode = function (position) {
        return this.mapToNormalListFn('getNode', position);
    };
    AbstractCircleSinglyList.prototype.append = function (val) {
        return this.mapToNormalListFn('append', val);
    };
    AbstractCircleSinglyList.prototype.prepend = function (val) {
        return this.mapToNormalListFn('prepend', val);
    };
    AbstractCircleSinglyList.prototype.find = function (condition) {
        return this.mapToNormalListFn('find', condition);
    };
    AbstractCircleSinglyList.prototype.indexOf = function (val) {
        return this.mapToNormalListFn('indexOf', val);
    };
    AbstractCircleSinglyList.prototype.remove = function (val) {
        return this.mapToNormalListFn('remove', val);
    };
    AbstractCircleSinglyList.prototype.removeHead = function () {
        return this.mapToNormalListFn('removeHead');
    };
    AbstractCircleSinglyList.prototype.removeTail = function () {
        return this.mapToNormalListFn('removeTail');
    };
    AbstractCircleSinglyList.prototype.first = function (num) {
        invariant(num >= 0, "[linked-list] param 'num' (" + num + ") should not less than 0");
        var iter = this.circleIterator();
        var result = [];
        for (var i = 0; i < num; i++) {
            var val = iter.next();
            result.push(val.value);
        }
        return result;
    };
    AbstractCircleSinglyList.prototype.toArray = function () {
        return this.mapToNormalListFn('toArray');
    };
    AbstractCircleSinglyList.prototype.reverse = function () {
        return this.mapToNormalListFn('reverse');
    };
    return AbstractCircleSinglyList;
}(SinglyList));
// 循环链表中的大部分方法，都可以转换成单向链表
// 每次操作之前将列表断开，执行完后再结合
var CircleSinglyList = /** @class */ (function (_super) {
    __extends(CircleSinglyList, _super);
    function CircleSinglyList() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var _this = _super.apply(this, __spread(values)) || this;
        _this.cyclization();
        return _this;
    }
    CircleSinglyList.prototype.breakCircle = function () {
        if (this._tail && this._tail.next === this._head) {
            this._tail.next = null;
        }
    };
    CircleSinglyList.prototype.cyclization = function () {
        if (this._tail && this._tail.next === null) {
            this._tail.next = this._head;
        }
    };
    CircleSinglyList.prototype.clone = function () {
        var arrValue = this.toArray();
        return new (CircleSinglyList.bind.apply(CircleSinglyList, __spread([void 0], arrValue)))();
    };
    return CircleSinglyList;
}(AbstractCircleSinglyList));

var DoublyList = /** @class */ (function (_super) {
    __extends(DoublyList, _super);
    function DoublyList() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        return _super.apply(this, __spread(values)) || this;
    }
    // Adds the element at the end of the linked list
    DoublyList.prototype.append = function (val) {
        var node = new DoublyNode(val);
        if (!this._tail) {
            this._head = this._tail = node;
        }
        else {
            this._tail.next = node;
            node.prev = this._tail;
            this._tail = node;
        }
        this._length++;
        return true;
    };
    // Add the element at the beginning of the linked list
    DoublyList.prototype.prepend = function (val) {
        var node = new DoublyNode(val);
        if (!this._head) {
            this._head = this._tail = node;
        }
        else {
            node.next = this._head;
            this._head.prev = node;
            this._head = node;
        }
        this._length++;
        return true;
    };
    // remove by value
    DoublyList.prototype.remove = function (val) {
        var currentNode = this._head;
        if (!currentNode) {
            return;
        }
        // 当首个元素恰好是目标值的时候
        if (this.compare.equal(currentNode.value, val)) {
            // 这里需要注意，有两种情况：
            if (currentNode.next) {
                // 链表多于 1 个元素
                this._head = currentNode.next;
                this._head.prev = null;
                currentNode.next = currentNode.prev = null;
            }
            else {
                // 链表只有 1 个元素
                this._head = this._tail = null;
            }
            this._length--;
            return val;
        }
        else {
            while (true) {
                if (this.compare.equal(currentNode.value, val)) {
                    if (currentNode.next) {
                        // special case for last element
                        currentNode.prev.next = currentNode.next;
                        currentNode.next.prev = currentNode.prev;
                        currentNode.next = currentNode.prev = null;
                    }
                    else {
                        currentNode.prev.next = null;
                        this._tail = currentNode.prev;
                        currentNode.next = currentNode.prev = null;
                    }
                    this._length--;
                    return currentNode.value;
                }
                else {
                    if (currentNode.next) {
                        currentNode = currentNode.next;
                    }
                    else {
                        return;
                    }
                }
            }
        }
    };
    DoublyList.prototype.removeHead = function () {
        var currentNode = this._head;
        // empty list
        if (!currentNode) {
            return;
        }
        // single item list
        if (!this._head.next) {
            this._head = null;
            this._tail = null;
            // full list
        }
        else {
            currentNode.next.prev = null;
            this._head = currentNode.next;
            currentNode.next = null;
        }
        this._length--;
        return currentNode.value;
    };
    DoublyList.prototype.removeTail = function () {
        var tailNode = this._tail;
        // empty list
        if (!tailNode) {
            return;
        }
        // single item list
        if (!this._head.next) {
            this._head = null;
            this._tail = null;
            // full list
        }
        else {
            tailNode.prev.next = null;
            this._tail = tailNode.prev;
            tailNode.next = tailNode.prev = null;
        }
        this._length--;
        return tailNode.value;
    };
    DoublyList.prototype.reverse = function () {
        if (!this._head) {
            return;
        }
        var currentNode = this._head;
        var prevNode = null;
        var nextNode;
        this._tail = this._head;
        while (currentNode !== null) {
            nextNode = currentNode.next;
            currentNode.next = prevNode;
            currentNode.prev = nextNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }
        this._head = prevNode;
    };
    DoublyList.prototype.clone = function () {
        var arrValue = this.toArray();
        return new (DoublyList.bind.apply(DoublyList, __spread([void 0], arrValue)))();
    };
    return DoublyList;
}(List));
var AbstractCircleDoublyList = /** @class */ (function (_super) {
    __extends(AbstractCircleDoublyList, _super);
    function AbstractCircleDoublyList() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var _this = _super.apply(this, __spread(values)) || this;
        _this.cyclization();
        return _this;
    }
    AbstractCircleDoublyList.prototype.iterator = function () {
        var currentNode;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    currentNode = this._head;
                    _a.label = 1;
                case 1:
                    if (!currentNode) return [3 /*break*/, 3];
                    return [4 /*yield*/, currentNode.value];
                case 2:
                    _a.sent();
                    currentNode = currentNode.next;
                    // 如果下一个节点是 head，说明回到循环列表的头部了
                    if (currentNode === this._head) {
                        currentNode = null;
                    }
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    AbstractCircleDoublyList.prototype.circleIterator = function () {
        var currentNode;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    currentNode = this._head;
                    _a.label = 1;
                case 1:
                    if (!currentNode) return [3 /*break*/, 3];
                    return [4 /*yield*/, currentNode.value];
                case 2:
                    _a.sent();
                    currentNode = currentNode.next;
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    AbstractCircleDoublyList.prototype[Symbol.iterator] = function () {
        return this.iterator();
    };
    AbstractCircleDoublyList.prototype.mapToNormalListFn = function (name) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        this.breakCircle();
        var result = _super.prototype[name].apply(this, params);
        this.cyclization();
        return result;
    };
    AbstractCircleDoublyList.prototype.getNode = function (position) {
        return this.mapToNormalListFn('getNode', position);
    };
    AbstractCircleDoublyList.prototype.append = function (val) {
        return this.mapToNormalListFn('append', val);
    };
    AbstractCircleDoublyList.prototype.prepend = function (val) {
        return this.mapToNormalListFn('prepend', val);
    };
    AbstractCircleDoublyList.prototype.find = function (condition) {
        return this.mapToNormalListFn('find', condition);
    };
    AbstractCircleDoublyList.prototype.indexOf = function (val) {
        return this.mapToNormalListFn('indexOf', val);
    };
    AbstractCircleDoublyList.prototype.remove = function (val) {
        return this.mapToNormalListFn('remove', val);
    };
    AbstractCircleDoublyList.prototype.removeHead = function () {
        return this.mapToNormalListFn('removeHead');
    };
    AbstractCircleDoublyList.prototype.removeTail = function () {
        return this.mapToNormalListFn('removeTail');
    };
    AbstractCircleDoublyList.prototype.first = function (num) {
        invariant(num >= 0, "[linked-list] param 'num' (" + num + ") should not less than 0");
        var iter = this.circleIterator();
        var result = [];
        for (var i = 0; i < num; i++) {
            var val = iter.next();
            result.push(val.value);
        }
        return result;
    };
    AbstractCircleDoublyList.prototype.toArray = function () {
        return this.mapToNormalListFn('toArray');
    };
    AbstractCircleDoublyList.prototype.reverse = function () {
        return this.mapToNormalListFn('reverse');
    };
    return AbstractCircleDoublyList;
}(DoublyList));
// 循环链表中的大部分方法，都可以转换成双向链表
// 每次操作之前将列表断开，执行完后再结合
var CircleDoublyList = /** @class */ (function (_super) {
    __extends(CircleDoublyList, _super);
    function CircleDoublyList() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var _this = _super.apply(this, __spread(values)) || this;
        _this.cyclization();
        return _this;
    }
    CircleDoublyList.prototype.breakCircle = function () {
        if (this._tail && this._head && this._tail.next === this._head) {
            this._tail.next = null;
            this._head.prev = null;
        }
    };
    CircleDoublyList.prototype.cyclization = function () {
        if (this._head && this._tail && this._tail.next === null) {
            this._tail.next = this._head;
            this._head.prev = this._tail;
        }
    };
    CircleDoublyList.prototype.clone = function () {
        var arrValue = this.toArray();
        return new (CircleDoublyList.bind.apply(CircleDoublyList, __spread([void 0], arrValue)))();
    };
    return CircleDoublyList;
}(AbstractCircleDoublyList));

exports.SinglyNode = SinglyNode;
exports.DoublyNode = DoublyNode;
exports.SinglyList = SinglyList;
exports.AbstractCircleSinglyList = AbstractCircleSinglyList;
exports.CircleSinglyList = CircleSinglyList;
exports.DoublyList = DoublyList;
exports.AbstractCircleDoublyList = AbstractCircleDoublyList;
exports.CircleDoublyList = CircleDoublyList;
