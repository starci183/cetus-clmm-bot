import { ListNode } from './node';
import Comparator from 'ss-comparator';
export interface IFindConition<T> {
    value?: T;
    callback?: (value: T) => boolean;
}
export default abstract class List<T, U extends ListNode<T>> {
    protected _head: U | null;
    protected _tail: U | null;
    protected _length: number;
    compare: Comparator;
    constructor(...values: T[]);
    readonly head: T | void;
    readonly tail: T | void;
    readonly length: number;
    readonly loopLength: number;
    getNode(position: number): U | null;
    get(position: number): T | null;
    /**
     * 根据指定条件返回待查找的链表节点
     *
     * @param {IFindConition<T>} { value, callback }
     * @returns
     * @memberof List
     */
    find({ value, callback }: IFindConition<T>): U | null;
    indexOf(val: T): Number;
    first(num: number): T[];
    toArray(): T[];
    isEmpty(): boolean;
    iterator(): IterableIterator<T>;
    [Symbol.iterator](): IterableIterator<T>;
    abstract clone(): List<T, U>;
    abstract append(val: T): boolean;
    abstract prepend(val: T): boolean;
    abstract remove(val: T): T | void;
    abstract removeHead(): T | void;
    abstract removeTail(): T | void;
    abstract reverse(): void;
}
