import { SinglyNode } from './node';
import List, { IFindConition } from './list';
export declare class SinglyList<T> extends List<T, SinglyNode<T>> {
    constructor(...values: T[]);
    append(val: T): boolean;
    prepend(val: T): boolean;
    remove(val: T): T | void;
    removeHead(): T | void;
    removeTail(): T | void;
    reverse(): void;
    clone(): SinglyList<T>;
}
export declare abstract class AbstractCircleSinglyList<T> extends SinglyList<T> {
    constructor(...values: T[]);
    iterator(): IterableIterator<T>;
    circleIterator(): IterableIterator<T>;
    [Symbol.iterator](): IterableIterator<T>;
    mapToNormalListFn(name: any, ...params: any[]): any;
    getNode(position: number): SinglyNode<T> | null;
    append(val: T): boolean;
    prepend(val: T): boolean;
    find(condition: IFindConition<T>): SinglyNode<T> | null;
    indexOf(val: T): Number;
    remove(val: T): T | void;
    removeHead(): T | void;
    removeTail(): T | void;
    first(num: number): T[];
    toArray(): T[];
    reverse(): void;
    abstract clone(): AbstractCircleSinglyList<T>;
    abstract breakCircle(): void;
    abstract cyclization(): void;
}
export declare class CircleSinglyList<T> extends AbstractCircleSinglyList<T> {
    breakCircle(): void;
    cyclization(): void;
    constructor(...values: T[]);
    clone(): CircleSinglyList<T>;
}
