import { GraphEdge } from './edge';
import { GraphVertex } from './vertex';
export declare class Graph {
    isDirected: boolean;
    vertices: {
        [key: string]: GraphVertex;
    };
    edges: {
        [key: string]: GraphEdge;
    };
    /**
     * Creates an instance of Graph.
     * @param {boolean} [isDirected=false] - 是否是有向图
     * @memberof Graph
     */
    constructor(isDirected?: boolean);
    /**
     * 添加节点
     *
     * @param {GraphVertex} newVertex
     * @returns {Graph}
     * @memberof Graph
     */
    addVertex(newVertex: GraphVertex): Graph;
    /**
     * 根据 key 值返回指定节点
     *
     * @param {string} vertexKey
     * @returns {GraphVertex}
     * @memberof Graph
     */
    getVertexByKey(vertexKey: string): GraphVertex;
    /**
     * 返回指定节点的相邻节点
     *
     * @param {GraphVertex} vertex
     * @returns {GraphVertex[]}
     */
    getNeighbors(vertex: GraphVertex): GraphVertex[];
    /**
     * 返回图中所有的节点
     *
     * @returns {GraphVertex[]}
     * @memberof Graph
     */
    getAllVertices(): GraphVertex[];
    /**
     * 返回图中所有的边
     *
     * @returns {GraphEdge[]}
     * @memberof Graph
     */
    getAllEdges(): GraphEdge[];
    /**
     * 给图中添加边
     *
     * @param {GraphEdge} edge - 待添加的边
     * @param {boolean} [disableErrorWhenExist=false] - 是否关闭错误提示（当边已经存在图中的时候），默认是有错误提示
     * @returns {Graph}
     * @memberof Graph
     */
    addEdge(edge: GraphEdge, disableErrorWhenExist?: boolean): Graph;
    /**
     * 删除图中的某条边
     *
     * @param {GraphEdge} edge - 边的实例
     * @param {boolean} [disableErrorWhenExist=false] - 是否关闭错误提示（当图中不存在边时），默认是有错误提示
     * @returns {Graph}
     * @memberof Graph
     */
    deleteEdge(edge: GraphEdge, disableErrorWhenExist?: boolean): Graph;
    /**
     * 查找开始节点和结束节点之间的那条边
     *
     * @param {GraphVertex} startVertex - 开始节点
     * @param {GraphVertex} endVertex - 结束节点
     * @returns {(GraphEdge | null)}
     * @memberof Graph
     */
    findEdge(startVertex: GraphVertex, endVertex: GraphVertex): GraphEdge | null;
    /**
     * 返回图中所有边的权重之和
     *
     * @returns {number}
     * @memberof Graph
     */
    getWeight(): number;
    /**
     * 让图中所有的边都方向
     *
     * @returns {Graph}
     * @memberof Graph
     */
    reverse(): Graph;
    /**
     * 返回“节点 - 索引”映射表
     *
     * @returns {{ [key: string]: number }} - 映射表对象
     * @memberof Graph
     */
    getVerticesIndices(): {
        [key: string]: number;
    };
    /**
     * 生成邻接矩阵
     *
     * @returns {number[][]}
     * @memberof Graph
     */
    getAdjacencyMatrix(): number[][];
    /**
     * 重写 toString 方法，仅仅是打印出所有节点的列表
     * @return {string}
     */
    toString(): string;
    /**
     * Breadth-first search (BFS)
     *
     * @param {GraphVertex} first - first node to start the bfs
     * @memberof Graph
     */
    bfs(first: GraphVertex): Generator<GraphVertex, void, unknown>;
    /**
     * Depth-first search (DFS)
     *
     * @param {GraphVertex} first - first node to start the dfs
     * @memberof Graph
     */
    dfs(first: GraphVertex): Generator<GraphVertex, void, unknown>;
    findAllPath(source: GraphVertex, target: GraphVertex): Generator<GraphVertex[], void, unknown>;
}
