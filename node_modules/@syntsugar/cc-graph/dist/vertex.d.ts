import { GraphEdge } from './edge';
export declare class GraphVertex {
    value: any;
    edges: Map<string, GraphEdge>;
    /**
     * Creates an instance of GraphVertex.
     * @param {*} value - 节点值
     * @memberof GraphVertex
     */
    constructor(value: any);
    /**
     * 将 edge 添加到当前节点的边链表中
     *
     * @param {GraphEdge} edge - edge 实例
     * @returns {GraphVertex}
     * @memberof GraphVertex
     */
    addEdge(edge: GraphEdge): this;
    /**
     * 将 edge 从当前节点的边链表中删除
     *
     * @param {GraphEdge} edge  - edge 实例
     * @memberof GraphVertex
     */
    deleteEdge(edge: GraphEdge): void;
    /**
     * 获取所有当前节点的相邻节点
     *
     * @returns {GraphVertex[]}
     * @memberof GraphVertex
     */
    getNeighbors(): GraphVertex[];
    /**
     * 获取所有的边
     *
     * @returns {GraphEdge[]}
     * @memberof GraphVertex
     */
    getEdges(): GraphEdge[];
    /**
     * 获取当前节点的度
     *
     * @returns {number}
     * @memberof GraphVertex
     */
    getDegree(): number;
    /**
     * 判断某条边是否存在于当前节点上
     *
     * @param {GraphEdge} requiredEdge
     * @returns {boolean}
     * @memberof GraphVertex
     */
    hasEdge(requiredEdge: GraphEdge): boolean;
    /**
     * 判断某个节点是否是和当前节点连接
     *
     * @param {GraphVertex} vertex
     * @returns {boolean}
     * @memberof GraphVertex
     */
    hasNeighbor(vertex: GraphVertex): boolean;
    /**
     * 查找当前节点到指定节点的边，
     * 如果存在返回该边，否则返回 null
     *
     * @param {GraphVertex} vertex
     * @returns {*}
     * @memberof GraphVertex
     */
    findEdge(vertex: GraphVertex): any;
    /**
     * 返回当前节点 key 值
     *
     * @returns {*}
     * @memberof GraphVertex
     */
    getKey(): any;
    /**
     * 删除当前节点所有的边
     *
     * @returns {GraphVertex}
     * @memberof GraphVertex
     */
    deleteAllEdges(): GraphVertex;
    /**
     * 重写 toString 方法
     *
     * @param {(value: any)=>string} [callback] - 支持自定义 toString 格式
     * @returns {string}
     * @memberof GraphVertex
     */
    toString(callback?: (value: any) => string): string;
}
