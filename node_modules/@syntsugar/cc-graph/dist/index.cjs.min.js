"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var tslib=require("tslib"),Queue=_interopDefault(require("ss-queue")),Stack=_interopDefault(require("ss-stack")),GraphEdge=function(){function e(e,t,r){void 0===r&&(r=0),this.startVertex=e,this.endVertex=t,this.weight=r}return e.prototype.getKey=function(){return this.startVertex.getKey()+"_"+this.endVertex.getKey()},e.prototype.reverse=function(){var e=this.startVertex;return this.startVertex=this.endVertex,this.endVertex=e,this},e.prototype.clone=function(){return new e(this.startVertex,this.endVertex,this.weight)},e.prototype.toString=function(){return this.getKey()},e}();function invariant(e,t,r){if(void 0===r&&(r="cc-graph"),!e)throw new Error((r?"["+r+"]":"")+" Invariant failed: "+t)}function isExist(e,t){var r=null!=e;return(t=void 0===t?!0:t)?r&&"undefined"!==e&&"null"!==e:r}var GraphVertex=function(){function e(e){invariant(isExist(e),"Graph vertex must have a value"),this.value=e,this.edges=new Map}return e.prototype.addEdge=function(e){return this.edges.set(e.getKey(),e),this},e.prototype.deleteEdge=function(e){this.edges.delete(e.getKey())},e.prototype.getNeighbors=function(){var t=this;return this.getEdges().map(function(e){return e.startVertex===t?e.endVertex:e.startVertex})},e.prototype.getEdges=function(){return Array.from(this.edges.values())},e.prototype.getDegree=function(){return this.getEdges().length},e.prototype.hasEdge=function(t){return!!this.getEdges().find(function(e){return e===t})},e.prototype.hasNeighbor=function(t){return!!this.getEdges().find(function(e){return e.startVertex===t||e.endVertex===t})},e.prototype.findEdge=function(t){var e=this.getEdges().find(function(e){return e.startVertex===t||e.endVertex===t});return e||null},e.prototype.getKey=function(){return this.value},e.prototype.deleteAllEdges=function(){var t=this;return this.getEdges().forEach(function(e){return t.deleteEdge(e)}),this},e.prototype.toString=function(e){return e?e(this.value):""+this.value},e}();function buildDualStack(e,t,r,n){e&&(t.push(e),n.set(e.getKey(),!0),t=e.getNeighbors().filter(function(e){return!n.get(e.getKey())}),r.push(t))}function cutdownDualStack(e,t,r){e=e.pop();e&&r.set(e.getKey(),!1),t.pop()}var Graph=function(){function e(e){void 0===e&&(e=!1),this.vertices={},this.edges={},this.isDirected=e}return e.prototype.addVertex=function(e){return this.vertices[e.getKey()]=e,this},e.prototype.getVertexByKey=function(e){return this.vertices[e]},e.prototype.getNeighbors=function(e){return e.getNeighbors()},e.prototype.getAllVertices=function(){return Object.values(this.vertices)},e.prototype.getAllEdges=function(){return Object.values(this.edges)},e.prototype.addEdge=function(e,t){if(void 0===t&&(t=!1),this.edges[e.getKey()]){if(t)return this;invariant(!1,"Edge has already been added before")}var t=this.getVertexByKey(e.startVertex.getKey()),r=this.getVertexByKey(e.endVertex.getKey());return t||(this.addVertex(e.startVertex),t=this.getVertexByKey(e.startVertex.getKey())),r||(this.addVertex(e.endVertex),r=this.getVertexByKey(e.endVertex.getKey())),this.edges[e.getKey()]=e,this.isDirected?t.addEdge(e):(t.addEdge(e),t=e.clone(),r.addEdge(t.reverse())),this},e.prototype.deleteEdge=function(e,t){if(void 0===t&&(t=!1),!this.edges[e.getKey()]){if(t)return this;invariant(!1,"Edge not found in graph")}delete this.edges[e.getKey()];var t=this.getVertexByKey(e.startVertex.getKey()),r=this.getVertexByKey(e.endVertex.getKey());return t.deleteEdge(e),r.deleteEdge(e),this},e.prototype.findEdge=function(e,t){e=this.getVertexByKey(e.getKey());return e?e.findEdge(t):null},e.prototype.getWeight=function(){return this.getAllEdges().reduce(function(e,t){return e+t.weight},0)},e.prototype.reverse=function(){var t=this;return this.getAllEdges().forEach(function(e){t.deleteEdge(e),e.reverse(),t.addEdge(e)}),this},e.prototype.getVerticesIndices=function(){var r={};return this.getAllVertices().forEach(function(e,t){r[e.getKey()]=t}),r},e.prototype.getAdjacencyMatrix=function(){var i=this,e=this.getAllVertices(),s=this.getVerticesIndices(),o=Array(e.length).fill(null).map(function(){return Array(e.length).fill(1/0)});return e.forEach(function(r,n){r.getNeighbors().forEach(function(e){var t=s[e.getKey()],e=i.findEdge(r,e);e&&(o[n][t]=e.weight)})}),o},e.prototype.toString=function(){return Object.keys(this.vertices).toString()},e.prototype.bfs=function(t){var r,n,i;return tslib.__generator(this,function(e){switch(e.label){case 0:r=new Map,(n=new Queue).enqueue(t),e.label=1;case 1:return n.isEmpty()?[3,4]:!(i=n.dequeue())||r.has(i.getKey())?[3,3]:[4,i];case 2:e.sent(),r.set(i.getKey(),i),i.getNeighbors().forEach(function(e){return n.enqueue(e)}),e.label=3;case 3:return[3,1];case 4:return[2]}})},e.prototype.dfs=function(t){var r,n,i;return tslib.__generator(this,function(e){switch(e.label){case 0:r=new Map,(n=new Stack).push(t),e.label=1;case 1:return n.isEmpty()?[3,4]:!(i=n.pop())||r.has(i.getKey())?[3,3]:[4,i];case 2:e.sent(),r.set(i.getKey(),i),i.getNeighbors().forEach(function(e){return n.push(e)}),e.label=3;case 3:return[3,1];case 4:return[2]}})},e.prototype.findAllPath=function(t,r){var n,i,s,o,u;return tslib.__generator(this,function(e){switch(e.label){case 0:return(o=[],t!==r)?[3,2]:(o.push(t),[4,o]);case 1:return e.sent(),[2];case 2:n=new Map,i=new Stack,s=new Stack,buildDualStack(t,i,s,n),e.label=3;case 3:return i.isEmpty()?[3,6]:(o=s.pop())&&o.length?(u=o.shift(),s.push(o),u&&buildDualStack(u,i,s,n),i.peek!==r?[3,5]:[4,i.toArray()]):(s.push(o),cutdownDualStack(i,s,n),[3,3]);case 4:e.sent(),cutdownDualStack(i,s,n),e.label=5;case 5:return[3,3];case 6:return[2]}})},e}();exports.GraphEdge=GraphEdge,exports.GraphVertex=GraphVertex,exports.Graph=Graph;
