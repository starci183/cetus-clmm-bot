import{__generator}from"tslib";import Queue from"ss-queue";import Stack from"ss-stack";var GraphEdge=function(){function e(e,t,r){void 0===r&&(r=0),this.startVertex=e,this.endVertex=t,this.weight=r}return e.prototype.getKey=function(){return this.startVertex.getKey()+"_"+this.endVertex.getKey()},e.prototype.reverse=function(){var e=this.startVertex;return this.startVertex=this.endVertex,this.endVertex=e,this},e.prototype.clone=function(){return new e(this.startVertex,this.endVertex,this.weight)},e.prototype.toString=function(){return this.getKey()},e}();function invariant(e,t,r){if(void 0===r&&(r="cc-graph"),!e)throw new Error((r?"["+r+"]":"")+" Invariant failed: "+t)}function isExist(e,t){void 0===t&&(t=!0);var r=null!=e;return t?r&&"undefined"!==e&&"null"!==e:r}var GraphVertex=function(){function e(e){invariant(isExist(e),"Graph vertex must have a value"),this.value=e,this.edges=new Map}return e.prototype.addEdge=function(e){return this.edges.set(e.getKey(),e),this},e.prototype.deleteEdge=function(e){this.edges.delete(e.getKey())},e.prototype.getNeighbors=function(){var e=this;return this.getEdges().map(function(t){return t.startVertex===e?t.endVertex:t.startVertex})},e.prototype.getEdges=function(){return Array.from(this.edges.values())},e.prototype.getDegree=function(){return this.getEdges().length},e.prototype.hasEdge=function(e){return!!this.getEdges().find(function(t){return t===e})},e.prototype.hasNeighbor=function(e){return!!this.getEdges().find(function(t){return t.startVertex===e||t.endVertex===e})},e.prototype.findEdge=function(e){var t=this.getEdges().find(function(t){return t.startVertex===e||t.endVertex===e});return t||null},e.prototype.getKey=function(){return this.value},e.prototype.deleteAllEdges=function(){var e=this;return this.getEdges().forEach(function(t){return e.deleteEdge(t)}),this},e.prototype.toString=function(e){return e?e(this.value):""+this.value},e}();function buildDualStack(e,t,r,n){if(e){t.push(e),n.set(e.getKey(),!0);var i=e.getNeighbors().filter(function(e){return!n.get(e.getKey())});r.push(i)}}function cutdownDualStack(e,t,r){var n=e.pop();n&&r.set(n.getKey(),!1),t.pop()}var Graph=function(){function e(e){void 0===e&&(e=!1),this.vertices={},this.edges={},this.isDirected=e}return e.prototype.addVertex=function(e){return this.vertices[e.getKey()]=e,this},e.prototype.getVertexByKey=function(e){return this.vertices[e]},e.prototype.getNeighbors=function(e){return e.getNeighbors()},e.prototype.getAllVertices=function(){return Object.values(this.vertices)},e.prototype.getAllEdges=function(){return Object.values(this.edges)},e.prototype.addEdge=function(e,t){if(void 0===t&&(t=!1),this.edges[e.getKey()]){if(t)return this;invariant(!1,"Edge has already been added before")}var r=this.getVertexByKey(e.startVertex.getKey()),n=this.getVertexByKey(e.endVertex.getKey());if(r||(this.addVertex(e.startVertex),r=this.getVertexByKey(e.startVertex.getKey())),n||(this.addVertex(e.endVertex),n=this.getVertexByKey(e.endVertex.getKey())),this.edges[e.getKey()]=e,this.isDirected)r.addEdge(e);else{r.addEdge(e);var i=e.clone();n.addEdge(i.reverse())}return this},e.prototype.deleteEdge=function(e,t){if(void 0===t&&(t=!1),!this.edges[e.getKey()]){if(t)return this;invariant(!1,"Edge not found in graph")}delete this.edges[e.getKey()];var r=this.getVertexByKey(e.startVertex.getKey()),n=this.getVertexByKey(e.endVertex.getKey());return r.deleteEdge(e),n.deleteEdge(e),this},e.prototype.findEdge=function(e,t){var r=this.getVertexByKey(e.getKey());return r?r.findEdge(t):null},e.prototype.getWeight=function(){return this.getAllEdges().reduce(function(e,t){return e+t.weight},0)},e.prototype.reverse=function(){var e=this;return this.getAllEdges().forEach(function(t){e.deleteEdge(t),t.reverse(),e.addEdge(t)}),this},e.prototype.getVerticesIndices=function(){var e={};return this.getAllVertices().forEach(function(t,r){e[t.getKey()]=r}),e},e.prototype.getAdjacencyMatrix=function(){var e=this,t=this.getAllVertices(),r=this.getVerticesIndices(),n=Array(t.length).fill(null).map(function(){return Array(t.length).fill(1/0)});return t.forEach(function(t,i){t.getNeighbors().forEach(function(s){var o=r[s.getKey()],u=e.findEdge(t,s);u&&(n[i][o]=u.weight)})}),n},e.prototype.toString=function(){return Object.keys(this.vertices).toString()},e.prototype.bfs=function(e){var t,r,n;return __generator(this,function(i){switch(i.label){case 0:t=new Map,(r=new Queue).enqueue(e),i.label=1;case 1:return r.isEmpty()?[3,4]:!(n=r.dequeue())||t.has(n.getKey())?[3,3]:[4,n];case 2:i.sent(),t.set(n.getKey(),n),n.getNeighbors().forEach(function(e){return r.enqueue(e)}),i.label=3;case 3:return[3,1];case 4:return[2]}})},e.prototype.dfs=function(e){var t,r,n;return __generator(this,function(i){switch(i.label){case 0:t=new Map,(r=new Stack).push(e),i.label=1;case 1:return r.isEmpty()?[3,4]:!(n=r.pop())||t.has(n.getKey())?[3,3]:[4,n];case 2:i.sent(),t.set(n.getKey(),n),n.getNeighbors().forEach(function(e){return r.push(e)}),i.label=3;case 3:return[3,1];case 4:return[2]}})},e.prototype.findAllPath=function(e,t){var r,n,i,s,o,u;return __generator(this,function(a){switch(a.label){case 0:return r=[],e!==t?[3,2]:(r.push(e),[4,r]);case 1:return a.sent(),[2];case 2:n=new Map,i=new Stack,s=new Stack,buildDualStack(e,i,s,n),a.label=3;case 3:return i.isEmpty()?[3,6]:(o=s.pop())&&o.length?(u=o.shift(),s.push(o),u&&buildDualStack(u,i,s,n),i.peek!==t?[3,5]:[4,i.toArray()]):(s.push(o),cutdownDualStack(i,s,n),[3,3]);case 4:a.sent(),cutdownDualStack(i,s,n),a.label=5;case 5:return[3,3];case 6:return[2]}})},e}();export{GraphEdge,GraphVertex,Graph};
