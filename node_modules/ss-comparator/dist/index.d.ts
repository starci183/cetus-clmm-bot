/**
 * enumeration of compare result, there is only three state
 *
 * @export
 * @enum {number}
 */
export declare enum CompareResult {
    EQUAL = 0,
    GREATER = 1,
    LESS = -1
}
declare type normalOperand = string | number;
export declare type compareFunction = (x: any, y: any) => CompareResult;
/**
 * a class that describe how compares two object
 *
 * @export
 * @class Comparator
 */
export default class Comparator {
    compare: compareFunction;
    /**
     * Creates an instance of Comparator.
     * @param {compareFunction} compareFunction - function that implement compare operation
     * @memberof Comparator
     */
    constructor(compareFunction?: compareFunction);
    /**
     * @param {(string|number)} a - compare target a
     * @param {(string|number)} b - compare target b
     * @returns {number}
     */
    static defaultCompareFunction(a: normalOperand, b: normalOperand): CompareResult;
    /**
     * compare if equal or not, a === b
     *
     * @param {*} a
     * @param {*} b
     * @returns {boolean}
     * @memberof Comparator
     */
    equal(a: any, b: any): boolean;
    /**
     * compare if smaller. a < b
     *
     * @param {*} a
     * @param {*} b
     * @returns {boolean}
     * @memberof Comparator
     */
    lessThan(a: any, b: any): boolean;
    /**
     * compare if greater. a > b
     *
     * @param {*} a
     * @param {*} b
     * @returns {boolean}
     * @memberof Comparator
     */
    greaterThan(a: any, b: any): boolean;
    /**
     * compare if smaller or equal. a <= b
     *
     * @param {*} a
     * @param {*} b
     * @returns {boolean}
     * @memberof Comparator
     */
    lessThanOrEqual(a: any, b: any): boolean;
    /**
     * compare if greater or equal. a >= b
     *
     * @param {*} a
     * @param {*} b
     * @returns {boolean}
     * @memberof Comparator
     */
    greaterThanOrEqual(a: any, b: any): boolean;
    /**
     * reverse the compare function
     *
     * @memberof Comparator
     */
    reverse(): void;
}
export {};
