'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * enumeration of compare result, there is only three state
 *
 * @export
 * @enum {number}
 */
(function (CompareResult) {
    CompareResult[CompareResult["EQUAL"] = 0] = "EQUAL";
    CompareResult[CompareResult["GREATER"] = 1] = "GREATER";
    CompareResult[CompareResult["LESS"] = -1] = "LESS";
})(exports.CompareResult || (exports.CompareResult = {}));
/**
 * a class that describe how compares two object
 *
 * @export
 * @class Comparator
 */
var Comparator = /** @class */ (function () {
    /**
     * Creates an instance of Comparator.
     * @param {compareFunction} compareFunction - function that implement compare operation
     * @memberof Comparator
     */
    function Comparator(compareFunction) {
        this.compare = compareFunction || Comparator.defaultCompareFunction;
    }
    /**
     * @param {(string|number)} a - compare target a
     * @param {(string|number)} b - compare target b
     * @returns {number}
     */
    Comparator.defaultCompareFunction = function (a, b) {
        if (a === b) {
            return exports.CompareResult.EQUAL;
        }
        return a < b ? exports.CompareResult.LESS : exports.CompareResult.GREATER;
    };
    /**
     * compare if equal or not, a === b
     *
     * @param {*} a
     * @param {*} b
     * @returns {boolean}
     * @memberof Comparator
     */
    Comparator.prototype.equal = function (a, b) {
        return this.compare(a, b) === exports.CompareResult.EQUAL;
    };
    /**
     * compare if smaller. a < b
     *
     * @param {*} a
     * @param {*} b
     * @returns {boolean}
     * @memberof Comparator
     */
    Comparator.prototype.lessThan = function (a, b) {
        return this.compare(a, b) === exports.CompareResult.LESS;
    };
    /**
     * compare if greater. a > b
     *
     * @param {*} a
     * @param {*} b
     * @returns {boolean}
     * @memberof Comparator
     */
    Comparator.prototype.greaterThan = function (a, b) {
        return this.compare(a, b) === exports.CompareResult.GREATER;
    };
    /**
     * compare if smaller or equal. a <= b
     *
     * @param {*} a
     * @param {*} b
     * @returns {boolean}
     * @memberof Comparator
     */
    Comparator.prototype.lessThanOrEqual = function (a, b) {
        return this.lessThan(a, b) || this.equal(a, b);
    };
    /**
     * compare if greater or equal. a >= b
     *
     * @param {*} a
     * @param {*} b
     * @returns {boolean}
     * @memberof Comparator
     */
    Comparator.prototype.greaterThanOrEqual = function (a, b) {
        return this.greaterThan(a, b) || this.equal(a, b);
    };
    /**
     * reverse the compare function
     *
     * @memberof Comparator
     */
    Comparator.prototype.reverse = function () {
        var compareOriginal = this.compare;
        this.compare = function (a, b) { return compareOriginal(b, a); };
    };
    return Comparator;
}());

exports.default = Comparator;
